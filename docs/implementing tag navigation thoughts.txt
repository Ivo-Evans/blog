I could, but don't need, a sidebar. That's an advanced feature. I could also just turn each tag in the header bar into a link, and, for each tag, generate pages, like tag-fundamentals for instance. 

So that separates the task into two jobs: 
1) insert links to pages into each blog post - map the array of tags passed in to compile_article into anchors before you join with ', '
2) create pages, for each tag, containing those articles that have that tag. 

Number 2 is clearly the more ambitious job. One possibility is to separate out the Readable functionality from the Compilable functionality in the first line of make_main_pages, to do the Readable stuff in its parent method make_website, and to pass that information to both make_main_pages and to make_tag_pages

There is also the question of overflow to consider: should tag pages for which there are more than ten articles with the same tag overflow, on multiple pages, or just be one long page?

If yes, it drives home the fact that 'make tag pages' and 'make main pages' are very similar tasks, simply with a different set of inputs. Maybe I could rename make_main_pages to make_article_pages, and call it twice from make_website with different parameters, indicating: 
- different html file naming conventions
- a different collection of articles (the whole set for make_main_pages, some subset for each make_tag_pages)

This will really multiply the number of html pages. You will need to order these pages better than now. Maybe index.html needs to be in the home directory, but nothing else does, so you can file these better, e.g. extra-pages/back-pages/, extra-pages/tag-pages/ and extra-pages/about.html

The thing is, to do this, you will need to work out how to properly point 'backward' to JS, CSS and PNG files in different directories; and for each directory branch, you will need to generate html with different filepath references. You could ameliorate, if not eliminate, this problem, by putting all but index.html in /extra-pages/, and leaving them unordered except by alphabet in there. 

So that means that the First task in implementing a tag pages system is to order your current pages that are not index.html into a sub-directory, without breaking anything.#

Here's another plan: put all the html files in the home directory, but nothing else except the readme and cm. css and js can go in resources. That way, every html file will use the same paths to external resources.